/*
 * -------------------------------------------------
 *  nf-core/mag Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { 2 * task.attempt }
  memory = { 5.GB * task.attempt }
  time = { 4.h * task.attempt }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: phix_download_db {
    time = 4.h
  }
  withName: porechop {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt }
    time = { 4.h * task.attempt }
  }
  withName: nanolyse {
    cpus = { 2 * task.attempt}
    memory = { 5.GB * task.attempt}
    time = { 3.h * task.attempt }
  }
  //filtlong: exponential increase of memory and time with attempts
  withName: filtlong {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * (2**(task.attempt-1)) }
    time = { 24.h * (2**(task.attempt-1)) }
  }
  withName: host_bowtie2index {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt}
    time = { 4.h * task.attempt }
  }
  withName: remove_host {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt }
    time = { 6.h * task.attempt }
  }
  withName: remove_phix {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt }
    time = { 6.h * task.attempt  }
  }
  withName: centrifuge {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt }
    time = { 12.h * task.attempt }
  }
  withName: kraken2 {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt }
    time = { 12.h * task.attempt }
  }
  withName: krona {
    cpus = { 2 * task.attempt }
    memory = { 5.GB * task.attempt }
    time = { 12.h * task.attempt }
  }
  withName: cat {
    cpus = { 2 }
    memory = { 5.GB * task.attempt  }
    time = { 12.h * task.attempt }
  }
  withName: megahit {
    cpus = { 2 }
    memory = { 5.GB * task.attempt }
    time = { 16.h * task.attempt }
  }
  //SPAdes returns error(1) if it runs out of memory (and for other reasons as well...)!
  //exponential increase of memory and time with attempts, keep number of threads to enable reproducibility
  withName: spades {
    cpus = { 2 }
    memory = { 5.GB * (2**(task.attempt-1)) }
    time = { 24.h * (2**(task.attempt-1)) }
    errorStrategy = { task.exitStatus in [143,137,1] ? 'retry' : 'finish' }
    maxRetries = 5
  }
  withName: spadeshybrid {
    cpus = { 2 }
    memory = { 5.GB * (2**(task.attempt-1)) }
    time = { 24.h * (2**(task.attempt-1)) }
    errorStrategy = { task.exitStatus in [143,137,1] ? 'retry' : 'finish' }
    maxRetries = 5
  }
  withName: bowtie2 {
    cpus = { 2 * task.attempt}
    memory = { 5.GB * task.attempt }
    time = { 8.h * task.attempt }
  }
  withName: metabat {
    cpus = { 2 * task.attempt}
    memory = { 5.GB * task.attempt }
    time = { 8.h * task.attempt }
  }
  withName: busco {
    container = 'nfcore/magbusco:1.1.2'
    profiles {
      conda {
        conda = "$baseDir/containers/busco/environment.yml"
      }
    }
  }
  withName: busco_plot {
    container = 'nfcore/magbusco:1.1.2'
    profiles {
      conda {
        conda = "$baseDir/containers/busco/environment.yml"
      }
    }
  }
  withName: get_busco_version {
    container = 'nfcore/magbusco:1.1.2'
    profiles {
      conda {
        conda = "$baseDir/containers/busco/environment.yml"
      }
    }
  }
  withName: get_software_versions {
    cache = false
  }
}
